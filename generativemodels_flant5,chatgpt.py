# -*- coding: utf-8 -*-
"""Generativemodels-FlanT5,ChatGPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W06pu4U9IFdN4OpNqPCoeNRgABC_4Rw4
"""



!pip install datasets transformers sentence_transformers openai

from datasets import load_dataset

data=load_dataset("rotten_tomatoes")
data

from transformers import pipeline

pipe=pipeline(
    "text2text-generation" ,
    model="google/flan-t5-large" ,
    device= "cuda:0"
)

prompt="Is the following sentence postive or negative"

data=data.map(lambda example : {"t5" : prompt + example['text']})
data

import numpy as np
from tqdm import tqdm
from transformers.pipelines.pt_utils import KeyDataset

y_pred=[]
for output in tqdm(pipe(KeyDataset(data["test"],"t5")) , total=len(data["test"])):
  text=output[0]["generated_text"]
  y_pred.append(0 if text=="negative" else 1)

from sklearn.metrics import classification_report

def evaluate_performance(y_true,y_pred):
  performance=classification_report(
      y_true,y_pred ,
      target_names=["Negative Review","Positive review"]
  )
  print (performance)

evaluate_performance(data["test"]["label"] , y_pred)

"""ChatGPT

"""

!pip install datasets openai

from datasets import load_dataset

data=load_dataset("rotten_tomatoes")
data

import openai

client=openai.OpenAI(api_key="")

def chatgpt_generate(prompt, document , model="gpt-3.5-turbo-0125"):
  """Generate an output based on a prompt and an input document"""
  messages=[
      {
          "role":"system",
          "content":"You are a helpful assistant"
      },
      {
          "role" : "user" ,
          "content" : prompt.replace("[DOCUMENT]" ,document)
      }
  ]
  chat_completion=client.chat.completions.create(
      model=model,
      messages=messages,
      temperature=0
  )
  return chat_completion.choices[0].message.content

prompt="""Predict whether the following document is a positive or negative moview review:
[DOCUMENT]
If its positive return 1 and if it is negative return 0 .Do not give any other answer
 """
document="unpretencious,quirky,charming,original"
chatgpt_generate(prompt,document)

import numpy as np
from tqdm import tqdm

prediction=[chatgpt_generate(prompt,doc) for doc in tqdm(data['test']['text'])]

y_pred=[int(pred) for pred in prediction]

from sklearn.metrics import classification_report

def evaluate_performance(y_true,y_pred):
  performance=classification_report(
      y_true,y_pred ,
      target_names=["Negative Review","Positive review"]
  )
  print (performance)

evaluate_performance(data['test']['label'], y_pred)